#!/bin/sh
#
# pve-bulk - Copyright (c) 2018-2024 - Olivier Poncet
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>
#

# ----------------------------------------------------------------------------
# pve constants
# ----------------------------------------------------------------------------

pve_ct_manager="${PVE_CT_MANAGER:-/usr/sbin/pct}"
pve_vm_manager="${PVE_VM_MANAGER:-/usr/sbin/qm}"
pve_lower_id='100'
pve_upper_id='1000000'

# ----------------------------------------------------------------------------
# command-line arguments
# ----------------------------------------------------------------------------

arg_program='pve-bulk'
arg_action='not-set'
arg_snapname='not-set'
arg_ct_list="${PVE_CT_LIST:-not-set}"
arg_vm_list="${PVE_VM_LIST:-not-set}"
arg_usage='no'
arg_debug='no'
arg_error='no'

# ----------------------------------------------------------------------------
# get the program name
# ----------------------------------------------------------------------------

if [ "${0:-not-set}" != 'not-set' ]
then
    arg_program="${0}"
fi

# ----------------------------------------------------------------------------
# parse the <action> positional argument
# ----------------------------------------------------------------------------

if [ "${#}" -gt '0' ]
then
    arg_action="${1:-not-set}"
    shift
fi

# ----------------------------------------------------------------------------
# parse the positional arguments
# ----------------------------------------------------------------------------

case "${arg_action}" in
    'help')
        ;;
    'start')
        ;;
    'shutdown')
        ;;
    'stop')
        ;;
    'status')
        ;;
    'listsnapshot')
        ;;
    'snapshot' | 'rollback' | 'delsnapshot')
        if [ "${#}" -gt '0' ]
        then
            arg_snapname="${1:-not-set}"
            shift
        fi
        if [ "${arg_snapname}" = 'not-set' ]
        then
            arg_error='yes'
        fi
        ;;
    *)
        arg_error='yes'
        ;;
esac

# ----------------------------------------------------------------------------
# parse the remaining options
# ----------------------------------------------------------------------------

while [ "${#}" -gt '0' ]
do
    case "${1}" in
        *=*)
            arg_value="$(expr "${1}" : '[^=]*=\(.*\)')"
            ;;
        *)
            arg_value=''
            ;;
    esac
    case "${1}" in
        --ct-list=*)
            arg_ct_list="${arg_value}"
            ;;
        --vm-list=*)
            arg_vm_list="${arg_value}"
            ;;
        --all)
            arg_ct_list='all'
            arg_vm_list='all'
            ;;
        --running)
            arg_ct_list='running'
            arg_vm_list='running'
            ;;
        --stopped)
            arg_ct_list='stopped'
            arg_vm_list='stopped'
            ;;
        --help)
            arg_usage='yes'
            ;;
        --debug)
            arg_debug='yes'
            ;;
        --debug=*)
            arg_debug="${arg_value}"
            ;;
        *)
            echo "error: unsupported option [${1}]"
            exit 1
            ;;
    esac
    shift
done

# ----------------------------------------------------------------------------
# display help if needed
# ----------------------------------------------------------------------------

if [ "${arg_action}" = 'help' ] || [ "${arg_usage}" = 'yes' ] || [ "${arg_error}" = 'yes' ]
then
    cat << ____EOF
Usage: ${arg_program} [ACTION [PARAMETERS]] [OPTIONS]

Actions:

    help
    start
    shutdown
    stop
    status
    listsnapshot
    snapshot <snapname>
    rollback <snapname>
    delsnapshot <snapname>

Options:

    --ct-list={ctid,...}        ct list (defaults to 'none'; specify 'all' to select all CTs as with pct list, 'running' to select all running CTs or 'stopped' to select all stopped CTs)
    --vm-list={vmid,...}        vm list (defaults to 'none'; specify 'all' to select all VMs as with qm list, 'running' to select all running CTs or 'stopped' to select all stopped VMs)
    --all                       set ct-list and vm-list to 'all'
    --running                   set ct-list and vm-list to 'running'
    --stopped                   set ct-list and vm-list to 'stopped'

Special options:

    --help                      display this help and exit
    --debug[={yes|no}]          enable/disable the debug mode

Environment variables:

    PVE_CT_MANAGER              ct manager (defaults to pct)
    PVE_CT_LIST                 ct list    (defaults to pct list)
    PVE_VM_MANAGER              vm manager (defaults to qm)
    PVE_VM_LIST                 vm list    (defaults to qm list)

____EOF
    if [ "${arg_error}" = 'yes' ]
    then
        exit 1
    fi
    exit 0
fi

# ----------------------------------------------------------------------------
# enable the debug mode if requested
# ----------------------------------------------------------------------------

if [ "${arg_debug}" = 'yes' ]
then
    set -x
fi

# ----------------------------------------------------------------------------
# arg_ct_list
# ----------------------------------------------------------------------------

if [ "${arg_ct_list}" = 'not-set' ]
then
    arg_ct_list="0"
elif [ "${arg_ct_list}" = 'all' ]
then
    arg_ct_list=$(${pve_ct_manager} list | grep -v 'VMID' | awk '{ print $1 }')
elif [ "${arg_ct_list}" = 'running' ]
then
    arg_ct_list=$(${pve_ct_manager} list | grep -v 'VMID' | awk '{ if ($2 == "running") { print $1 } }')
elif [ "${arg_ct_list}" = 'stopped' ]
then
    arg_ct_list=$(${pve_ct_manager} list | grep -v 'VMID' | awk '{ if ($2 == "stopped") { print $1 } }')
else
    arg_ct_list=$(echo "${arg_ct_list}" | tr ',' ' ')
fi

# ----------------------------------------------------------------------------
# arg_vm_list
# ----------------------------------------------------------------------------

if [ "${arg_vm_list}" = 'not-set' ]
then
    arg_vm_list="0"
elif [ "${arg_vm_list}" = 'all' ]
then
    arg_vm_list=$(${pve_vm_manager} list | grep -v 'VMID' | awk '{ print $1 }')
elif [ "${arg_vm_list}" = 'running' ]
then
    arg_vm_list=$(${pve_vm_manager} list | grep -v 'VMID' | awk '{ if ($3 == "running") { print $1 } }')
elif [ "${arg_vm_list}" = 'stopped' ]
then
    arg_vm_list=$(${pve_vm_manager} list | grep -v 'VMID' | awk '{ if ($3 == "stopped") { print $1 } }')
else
    arg_vm_list=$(echo "${arg_vm_list}" | tr ',' ' ')
fi

# ----------------------------------------------------------------------------
# ct:actions
# ----------------------------------------------------------------------------

for arg_ct_id in ${arg_ct_list}
do
    if [ "${arg_ct_id}" -lt "${pve_lower_id}" ] || [ "${arg_ct_id}" -ge "${pve_upper_id}" ]
    then
        continue
    fi
    case "ct:${arg_action}" in
        'ct:start')
            parameter1=""
            ${pve_ct_manager} "${arg_action}" "${arg_ct_id}" > /dev/null 2>&1
            status="${?}"
            ;;
        'ct:shutdown')
            parameter1=""
            ${pve_ct_manager} "${arg_action}" "${arg_ct_id}" > /dev/null 2>&1
            status="${?}"
            ;;
        'ct:stop')
            parameter1=""
            ${pve_ct_manager} "${arg_action}" "${arg_ct_id}" > /dev/null 2>&1
            status="${?}"
            ;;
        'ct:status')
            echo -n "ct${arg_ct_id}: "
            ${pve_ct_manager} "${arg_action}" "${arg_ct_id}"
            status="${?}"
            ;;
        'ct:listsnapshot')
            echo "ct${arg_ct_id}:"
            ${pve_ct_manager} "${arg_action}" "${arg_ct_id}"
            status="${?}"
            ;;
        'ct:snapshot')
            parameter1="${arg_snapname}"
            ${pve_ct_manager} "${arg_action}" "${arg_ct_id}" "${parameter1}" > /dev/null 2>&1
            status="${?}"
            ;;
        'ct:rollback')
            parameter1="${arg_snapname}"
            ${pve_ct_manager} "${arg_action}" "${arg_ct_id}" "${parameter1}" > /dev/null 2>&1
            status="${?}"
            ;;
        'ct:delsnapshot')
            parameter1="${arg_snapname}"
            ${pve_ct_manager} "${arg_action}" "${arg_ct_id}" "${parameter1}" > /dev/null 2>&1
            status="${?}"
            ;;
        *)
            false
            ;;
    esac
    if [ "${status}" -eq '0' ]
    then
        result='succeeded'
    else
        result='failed'
    fi
    if [ "${parameter1:-not-set}" != 'not-set' ]
    then
        echo "ct${arg_ct_id}: ${arg_action} ${parameter1} has ${result}"
    else
        echo "ct${arg_ct_id}: ${arg_action} has ${result}"
    fi
done

# ----------------------------------------------------------------------------
# vm:actions
# ----------------------------------------------------------------------------

for arg_vm_id in ${arg_vm_list}
do
    if [ "${arg_vm_id}" -lt "${pve_lower_id}" ] || [ "${arg_vm_id}" -ge "${pve_upper_id}" ]
    then
        continue
    fi
    case "vm:${arg_action}" in
        'vm:start')
            parameter1=""
            ${pve_vm_manager} "${arg_action}" "${arg_vm_id}" > /dev/null 2>&1
            status="${?}"
            ;;
        'vm:shutdown')
            parameter1=""
            ${pve_vm_manager} "${arg_action}" "${arg_vm_id}" > /dev/null 2>&1
            status="${?}"
            ;;
        'vm:stop')
            parameter1=""
            ${pve_vm_manager} "${arg_action}" "${arg_vm_id}" > /dev/null 2>&1
            status="${?}"
            ;;
        'vm:status')
            echo -n "vm${arg_vm_id}: "
            ${pve_vm_manager} "${arg_action}" "${arg_vm_id}"
            status="${?}"
            ;;
        'vm:listsnapshot')
            echo "vm${arg_vm_id}:"
            ${pve_vm_manager} "${arg_action}" "${arg_vm_id}"
            status="${?}"
            ;;
        'vm:snapshot')
            parameter1="${arg_snapname}"
            ${pve_vm_manager} "${arg_action}" "${arg_vm_id}" "${parameter1}" > /dev/null 2>&1
            status="${?}"
            ;;
        'vm:rollback')
            parameter1="${arg_snapname}"
            ${pve_vm_manager} "${arg_action}" "${arg_vm_id}" "${parameter1}" > /dev/null 2>&1
            status="${?}"
            ;;
        'vm:delsnapshot')
            parameter1="${arg_snapname}"
            ${pve_vm_manager} "${arg_action}" "${arg_vm_id}" "${parameter1}" > /dev/null 2>&1
            status="${?}"
            ;;
        *)
            false
            ;;
    esac
    if [ "${status}" -eq '0' ]
    then
        result='succeeded'
    else
        result='failed'
    fi
    if [ "${parameter1:-not-set}" != 'not-set' ]
    then
        echo "vm${arg_vm_id}: ${arg_action} ${parameter1} has ${result}"
    else
        echo "vm${arg_vm_id}: ${arg_action} has ${result}"
    fi
done

# ----------------------------------------------------------------------------
# End-Of-File
# ----------------------------------------------------------------------------
